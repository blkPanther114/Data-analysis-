CREATE DATABASE UPSkill;
EXEC sp_databases

USE UPSkill

Use Master
drop database UPSkill
GO

CREATE DATABASE Employee_Data;
EXEC sp_databases

Use Employee_Data;
CREATE TABLE Employees(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25) ,
   SALARY   INT,       
   PRIMARY KEY (ID)
);

--Insert a record 
INSERT INTO EMPLOYEES (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Sara', 32, 'London', 33000.00 );

INSERT INTO EMPLOYEES (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Katie', 25, 'Reading', 45000.00 );

INSERT INTO EMPLOYEES (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'David', 45, 'Bristol', 65000.00 );


--Second way to insert a record
INSERT INTO EMPLOYEES 
VALUES (7, 'Muffy', 24, 'Oxford', 30000.00 );

--Alter table 
ALTER TABLE EMPLOYEES ADD Gender varchar(10);

--Drop table column
ALTER TABLE EMPLOYEES DROP COLUMN Gender

--Alter table 
ALTER TABLE EMPLOYEES ADD GENDER varchar(10);

-- Insert values in one column 

UPDATE EMPLOYEES SET GENDER = 'Female' WHERE ID = 1;
UPDATE EMPLOYEES SET GENDER = 'Female' WHERE ID = 2;
UPDATE EMPLOYEES SET GENDER = 'Male' WHERE ID = 3;
UPDATE EMPLOYEES SET GENDER = 'Female' WHERE ID = 7;
--Delete a table
CREATE TABLE CUSTOMER(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25) ,
   SALARY   INT,       
   PRIMARY KEY (ID)
);
--Delete a table
DROP TABLE IF EXISTS CUSTOMER

-- Key Violations
INSERT INTO EMPLOYEES 
VALUES (7, 'John', 27, 'Birmingham', 43000.00, 'Male');

--Activity 2
INSERT INTO EMPLOYEES 
VALUES (4, 'Mike', 30, 'Cornwall', 75000.00, 'Male' );

INSERT INTO EMPLOYEES 
VALUES (5, 'Hazal', 35, 'London', 95000.00, 'Female' );

INSERT INTO EMPLOYEES 
VALUES (6, 'Georgie', 28, 'Reading', 35000.00, 'Female' );

--BASIC COMMANDS IN SQL
--RETRIEVE DATA
SELECT ID, NAME, AGE, ADDRESS, SALARY FROM EMPLOYEES;

SELECT * FROM EMPLOYEES

--WHERE 
SELECT ID, NAME, SALARY 
FROM EMPLOYEES
WHERE SALARY > 50000;

--ACTIVITY 3 
SELECT ID, NAME, SALARY 
FROM EMPLOYEES
WHERE NAME = 'Mike';

--ALIAS 
SELECT SALARY as SALARY_GREATER_THAN_50000
FROM EMPLOYEES
WHERE SALARY > 50000;

-- Count
SELECT COUNT(SALARY) as SALARY_GREATER_THAN_50000
FROM EMPLOYEES
WHERE SALARY > 50000;

--GROUPBY 
SELECT GENDER, AVG(SALARY) as Average_Salary  FROM EMPLOYEES 
GROUP BY GENDER 

--HAVING
INSERT INTO EMPLOYEES 
VALUES (8, 'Tom', 45, 'London', 70000.00, 'Male' );
SELECT GENDER,AGE, AVG(SALARY) as Average_Salary  FROM EMPLOYEES 
GROUP BY AGE, GENDER 
HAVING AGE > 30


--ORDERBY
Select * from EMPLOYEES 
ORDER BY SALARY DESC;

--ACTIVITY 4
SELECT NAME, AGE, ADDRESS FROM EMPLOYEES 
WHERE GENDER = 'Female'
GROUP BY NAME, AGE, ADDRESS
HAVING AGE >30


--CONCAT Strings
ALTER TABLE EMPLOYEES ADD LAST_NAME varchar(25);
UPDATE EMPLOYEES SET LAST_NAME = 'Adams' WHERE ID = 1;
UPDATE EMPLOYEES SET LAST_NAME = 'Jay' WHERE ID = 2;
UPDATE EMPLOYEES SET LAST_NAME = 'Michael' WHERE ID = 3;
UPDATE EMPLOYEES SET LAST_NAME = 'Jackson' WHERE ID = 7;
UPDATE EMPLOYEES SET LAST_NAME = 'Riddle' WHERE ID = 8;

-- + Method to concat strings
SELECT 'Data' + ' ' + 'Analysis' + ' ' + 'Bootcamp'  as Course_Name 

SELECT CONCAT('Data' , ' ' , 'Analysis' , ' ' , 'Bootcamp') as Course_Name

Select NAME, LAST_NAME, FULL_NAME from EMPLOYEES

ALTER TABLE EMPLOYEES ADD FULL_NAME varchar(25);
ALTER TABLE EMPLOYEES DROP COLUMN FULL_NAME
ALTER TABLE EMPLOYEES DROP COLUMN LAST_NAME
UPDATE EMPLOYEES SET FULL_NAME = CONCAT(NAME , ' ' , LAST_NAME); 

--COUNT
Select CONCAT ('The', ' ', 'count' , ' ', 'of',
' ', 'employees (Age >30)', ' ', 'is') as Description, 
count(*) AS Number_of_Employees
from EMPLOYEES
Where age > 30

Select CONCAT ('The', ' ', 'count' , ' ', 'of',
' ', 'employees (Age >30)', ' ', 'is') as Description, 
count(*) AS Number_of_Employees
from EMPLOYEES

--ACTIVITY 5
Select CONCAT ('The', ' ', 'count' , ' ', 'of',
' ', 'employees', ' ', 'who' , ' ', 'lives', ' ', 'in', ' ', 
'London', ' ', 'is') as Description, 
count(*) AS Number_of_Employees
from EMPLOYEES
where ADDRESS = 'London'

--IS NULL / IS NOT NULL
--IS NULL
SELECT NAME,LAST_NAME,FULL_NAME FROM EMPLOYEES 
WHERE LAST_NAME IS NULL;

--IS NOT NULL
SELECT NAME,LAST_NAME,FULL_NAME FROM EMPLOYEES 
WHERE LAST_NAME IS NOT NULL;

--Converting NULL Values to Real Values
--Replacing Null with Real Values 

UPDATE EMPLOYEES
SET LAST_NAME = 'Not Available'
WHERE LAST_NAME IS NULL;

SELECT * FROM EMPLOYEES
--AND 
Select Name, Age, Address
FROM EMPLOYEES
WHERE AGE >30 AND ADDRESS = 'London' AND GENDER = 'Female'

SELECT * FROM EMPLOYEES

--OR 
Select Name, Age, Address
FROM EMPLOYEES
WHERE AGE >30 OR ADDRESS = 'London' OR GENDER = 'Female'

Select Name, Address
FROM EMPLOYEES
WHERE NOT ADDRESS = 'London'


SELECT * FROM EMPLOYEES WHERE NAME LIKE 'M%'

Use Employee_Data;
Select Name,Age,Address, salary from Employees  
where Age BETWEEN 20 AND 30

Select Name, Address, Salary from Employees 
where Address IN('Reading', 'London')

Select Name, Address, Salary from Employees 
where Address NOT IN('Reading', 'London')

Select DISTINCT(ADDRESS) from Employees 
Select COUNT(DISTINCT ADDRESS) AS COUNT_OF_ADDRESS 
FROM Employees;

select DISTINCT ADDRESS from Employees
Where Gender = 'Female' 

select DISTINCT Name, Age, ADDRESS from Employees
Where Gender = 'Female' 

Select Name, Age, Salary
From Employees
WHERE GENDER = 'Male'
ORDER BY AGE DESC, SALARY ASC

--Nested Queries
CREATE TABLE HIGHEST_PAID(
    ID   INT              NOT NULL,
   NAME VARCHAR (25)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25) ,
   SALARY   INT,
   GENDER CHAR (25),
   LAST_NAME CHAR(25),
   FULL_NAME CHAR(25),
   PRIMARY KEY (ID)
);
INSERT INTO HIGHEST_PAID 
SELECT * 
   FROM Employees 
   WHERE Salary > (SELECT AVG(SALARY) 
         FROM Employees) ;

SELECT * FROM HIGHEST_PAID

SELECT MAX(SALARY) AS MAXIMUM_SALARY,
MIN(SALARY) AS MINIMUM_SALARY
FROM EMPLOYEES
WHERE GENDER = 'Female'

SELECT GENDER, MAX(SALARY) AS MAXIMUM_SALARY,
MIN(SALARY) AS MINIMUM_SALARY
FROM EMPLOYEES
GROUP BY GENDER



Select NAME, Salary
from Employees
where Salary = (Select max (salary) from Employees where gender = 'Male');

Select NAME, Salary
from Employees
where Salary = (Select max (salary) from Employees where gender = 'Female');


SELECT GENDER, AVG(SALARY) AS AVERAGE_SALARY
FROM EMPLOYEES
GROUP BY GENDER

SELECT Name, Salary , (Salary * 0.20) as Bonus 
From Employees
SELECT (45 + 45) as sum_of_numbers
SELECT (90 - 45) as Diff_of_numbers
SELECT (8/2) as Div_numbers

--join function
CREATE TABLE Departments(
    DEPT_ID   INT NOT NULL,             
   NAME VARCHAR (25),
   PRIMARY KEY (DEPT_ID)
);
INSERT INTO DEPARTMENTS VALUES (1, 'Sales')
INSERT INTO DEPARTMENTS VALUES (2, 'Marketing')
INSERT INTO DEPARTMENTS VALUES (3, 'HR')
INSERT INTO DEPARTMENTS VALUES (4, 'Finance')
INSERT INTO DEPARTMENTS VALUES (5, 'Product')

SELECT * FROM DEPARTMENTS
SELECT * FROM EMPLOYEES
CREATE TABLE EMP_DEPT(
    EMP_ID INT, 
	DEPT_ID INT,
	FOREIGN KEY(EMP_ID) REFERENCES EMPLOYEES(ID),
	FOREIGN KEY(DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID)
);


INSERT INTO EMP_DEPT VALUES (1,2)
INSERT INTO EMP_DEPT VALUES (1,2)
INSERT INTO EMP_DEPT VALUES (3,4)
INSERT INTO EMP_DEPT VALUES (5,3)
INSERT INTO EMP_DEPT VALUES (4,1)
INSERT INTO EMP_DEPT VALUES (8,2)
INSERT INTO EMP_DEPT VALUES (6,3)
INSERT INTO EMP_DEPT VALUES (7,1)
INSERT INTO EMP_DEPT VALUES (2,1)
INSERT INTO EMP_DEPT VALUES (9,NULL)
INSERT INTO EMP_DEPT VALUES (10,NULL)

--Inner Join
SELECT * FROM EMP_DEPT AS EMP_DEPT 
INNER JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID

--outer join
SELECT * FROM EMP_DEPT AS EMP_DEPT 
FULL OUTER JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 

--Right Join
SELECT * FROM EMP_DEPT AS EMP_DEPT 
RIGHT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 

--Left Join
SELECT * FROM EMP_DEPT AS EMP_DEPT 
LEFT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 

--Union
SELECT * FROM EMP_DEPT AS EMP_DEPT 
RIGHT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID
UNION
SELECT * FROM EMP_DEPT AS EMP_DEPT 
LEFT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 


SELECT EMP.NAME,EMP.SALARY, DEPT.NAME FROM EMPLOYEES AS EMP
INNER JOIN EMP_DEPT AS EMP_DEPT ON
EMP.ID = EMP_DEPT.EMP_ID
INNER JOIN DEPARTMENTS AS DEPT ON
DEPT.DEPT_ID = EMP_DEPT.EMP_ID



CREATE DATABASE PATIENT_CARE;
EXEC sp_databases

CREATE TABLE PATIENTS_INFO(
   Patient_ID   INT  NOT NULL,
   Name VARCHAR (20) NOT NULL,
   Department  CHAR (25) ,
   Diagnosis  CHAR (25) ,
   Date_admitted  DATETIME, 
   Date_discharged DATETIME,
   PRIMARY KEY (Patient_ID)
);

INSERT INTO PATIENTS_INFO VALUES(1 , 'John Oliver' , 'E&&R' , 'hand injury' , '2022-05-13 16:03:43' , '2022-05-13 18:01:45')
INSERT INTO PATIENTS_INFO VALUES(2 , 'Meghan Austin' , 'E&R' , 'Flu' , '2022-04-12 12:03:23' , '2022-04-12 13:04:35')
INSERT INTO PATIENTS_INFO VALUES(3 , ' Nick Hilson  ' , ' Cardiology' , 'Heart issues' , '2022-04-01 10:01:43' , '2022-04-26 19:03:35')
INSERT INTO PATIENTS_INFO VALUES(4 , ' anna Daniel' , 'e&r' , 'flu' , '2022-05-12 11:03:43' , '2022-05-15 20:01:45')
INSERT INTO PATIENTS_INFO VALUES(5 , 'Emma James' , 'E&R' , 'Accident' , '2022-03-29 15:02:52' , '2022-04-10 19:03:12')

Select * from PATIENTS_INFO;


--UPPER AND TRIM
select TRIM(Name) as Name
FROM  patients_info

SELECT Upper(trim(diagnosis)) as Diagnosis_Type,
count(*) as Count_of_Diagnosis
FROM  patients_info
GROUP BY Upper(trim(diagnosis)) 

--REPLACE A CHARACTER
SELECT REPLACE(Department, '&&', '&') AS Department
FROM Patients_info

UPDATE PATIENTS_INFO
SET DEPARTMENT = REPLACE(Department, '&&', '&')

--UPPER
SELECT Upper(trim(NAME)) as PATIENT_NAME,
DIAGNOSIS as PRIORITY_PATIENT
FROM  patients_info
WHERE DEPARTMENT = ' Cardiology'

--UPDATE 
UPDATE PATIENTS_INFO
SET NAME = UPPER(NAME) 
WHERE DEPARTMENT = ' Cardiology'

--SUBSTRING FROM A STRING
SELECT SUBSTRING (DEPARTMENT, 1 , 4 ) as DEPARTMENT_CODE--starts at first, return the first 4 letters
FROM PATIENTS_INFO

--LEFT FUNCTION
SELECT NAME,
       LEFT(DEPARTMENT, 5) AS DEPARTMENT 
  FROM PATIENTS_INFO
--LOWER
SELECT LOWER(DIAGNOSIS) as lower_diagnosis
  FROM PATIENTS_INFO

--GET CURRENT DATE
SELECT GETDATE() as Current__Date

--NUMBER OF DAYS BETWEEN TWO DATES
SELECT *, 
DATEDIFF (day,DATE_ADMITTED, DATE_DISCHARGED ) AS DAYS_ADMITTED 
FROM PATIENTS_INFO 

--number of HOURS between two hours
SELECT *, 
DATEDIFF (hour,DATE_ADMITTED, DATE_DISCHARGED ) AS DAYS_ADMITTED 
FROM PATIENTS_INFO  WHERE DEPARTMENT = 'E&R'

--average of days
SELECT AVG(DATEDIFF (day,DATE_ADMITTED, DATE_DISCHARGED )) AS DAYS_ADMITTED 
FROM PATIENTS_INFO 
WHERE DEPARTMENT = 'E&R'