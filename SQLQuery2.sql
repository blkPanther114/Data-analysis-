Use Employee_Data;

--LIKE OPERATOR 
SELECT * FROM EMPLOYEES 
WHERE NAME LIKE 'M%'


-- ACTIVITY 1
CREATE DATABASE Authors;
EXEC sp_databases
Use Authors;
CREATE TABLE Author_info(
   NAME VARCHAR (20),    
   Book  CHAR (25)
);

INSERT INTO Author_info (NAME, Book)
VALUES ('T.M John', 'Book 1');

INSERT INTO Author_info (NAME, Book)
VALUES ('TM John', 'Book 2');

INSERT INTO Author_info (NAME, Book)
VALUES ('Dan Brown', 'Da Vinci code' );

INSERT INTO Author_info (NAME, Book)
VALUES ('Jane Austing', 'The book of Yoga' );

Select Name, Book 
From Author_info 
Where Name LIKE 'T%John%';


--BETWEEN
Use Employee_Data;
Select Name,Age,Address, salary from Employees  
where Age BETWEEN 20 AND 30


--IN
Select Name, Address, Salary from Employees 
where Address IN('Reading', 'London')

--NOT IN
Select Name, Address, Salary from Employees 
where Address NOT IN('Reading', 'London')

--DISTINCT
Select DISTINCT(ADDRESS) from Employees 

--DISTINCT COUNT
Select COUNT(DISTINCT ADDRESS) AS COUNT_OF_ADDRESS 
FROM Employees;

select DISTINCT ADDRESS from Employees
Where Gender = 'Female' 


select DISTINCT Name, Age, ADDRESS from Employees
Where Gender = 'Female' 


--Multiple columns sort
Select Name, Age, Salary
From Employees
WHERE GENDER = 'Male'
ORDER BY AGE DESC, SALARY ASC


--Nested queries 
SELECT AVG(SALARY) as Average_Salaries 
FROM EMPLOYEES


Select Name, Salary from Employees 
Where Salary > 56000


SELECT Name, Salary 
   FROM Employees 
   WHERE Salary > (SELECT AVG(SALARY) 
         FROM Employees) ;

-- Nested queries with INSERT
CREATE TABLE Highest_Paid(
    ID   INT              NOT NULL,
   NAME VARCHAR (25)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25) ,
   SALARY   INT,
   GENDER CHAR (25),
   LAST_NAME CHAR(25),
   FULL_NAME CHAR(25),
   PRIMARY KEY (ID)
);

INSERT INTO HIGHEST_PAID 
SELECT * 
   FROM Employees 
   WHERE Salary > (SELECT AVG(SALARY) 
         FROM Employees) ;

SELECT * FROM HIGHEST_PAID

-- MAXIMUM AND MINIMUM
SELECT MAX(SALARY) AS MAXIMUM_SALARY,
MIN(SALARY) AS MINIMUM_SALARY
FROM EMPLOYEES
WHERE GENDER = 'Female'


SELECT GENDER, MAX(SALARY) AS MAXIMUM_SALARY,
MIN(SALARY) AS MINIMUM_SALARY
FROM EMPLOYEES
GROUP BY GENDER

-- ACTIVITY 2
SELECT NAME, SALARY 
   FROM Employees 
   WHERE Salary = (SELECT MAX(SALARY) 
         FROM Employees
		 WHERE GENDER = 'FEMALE') ;

SELECT NAME, SALARY 
   FROM Employees 
   WHERE Salary = (SELECT MAX(SALARY) 
         FROM Employees
		 WHERE GENDER = 'MALE') ;


--AVERAGE 
SELECT GENDER, AVG(SALARY) AS AVERAGE_SALARY
FROM EMPLOYEES
GROUP BY GENDER

--Arithmetic * 
SELECT Name, Salary , (Salary * 0.20) as Bonus 
From Employees

SELECT (45 + 45) as sum_of_numbers
SELECT (90 - 45) as Diff_of_numbers
SELECT (8/2) as Div_numbers

-- Percentage 
SELECT * FROM EMPLOYEES

-- Joins 
CREATE TABLE Departments(
    DEPT_ID   INT NOT NULL,             
   NAME VARCHAR (25),
   PRIMARY KEY (DEPT_ID)
);

INSERT INTO DEPARTMENTS VALUES (1, 'Sales')
INSERT INTO DEPARTMENTS VALUES (2, 'Marketing')
INSERT INTO DEPARTMENTS VALUES (3, 'HR')
INSERT INTO DEPARTMENTS VALUES (4, 'Finance')
INSERT INTO DEPARTMENTS VALUES (5, 'Product')

SELECT * FROM DEPARTMENTS
SELECT * FROM EMPLOYEES
CREATE TABLE EMP_DEPT(
    EMP_ID INT, 
	DEPT_ID INT,
	FOREIGN KEY(EMP_ID) REFERENCES EMPLOYEES(ID),
	FOREIGN KEY(DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID)
);

INSERT INTO EMP_DEPT VALUES (1,2)
INSERT INTO EMP_DEPT VALUES (1,2)
INSERT INTO EMP_DEPT VALUES (3,4)
INSERT INTO EMP_DEPT VALUES (5,3)
INSERT INTO EMP_DEPT VALUES (4,1)
INSERT INTO EMP_DEPT VALUES (8,2)
INSERT INTO EMP_DEPT VALUES (6,3)
INSERT INTO EMP_DEPT VALUES (7,1)
INSERT INTO EMP_DEPT VALUES (2,1)
INSERT INTO EMP_DEPT VALUES (9,NULL)
INSERT INTO EMP_DEPT VALUES (10,NULL)

--ADDING NEW ROWS IN EMPLOYEES
INSERT INTO EMPLOYEES 
VALUES (9, 'Sean', 28, 'Newbury', 37000.00, 'Male', 'Jay', 'Sean Jay' );
INSERT INTO EMPLOYEES 
VALUES (10, 'Nick', 29, 'Manchester', 65000.00, 'Male', 'Powley', 'Nick Powley' );


SELECT * FROM EMPLOYEES
SELECT * FROM DEPARTMENTS 
SELECT * FROM EMP_DEPT

-- REMOVING DUPLICATES
SELECT DISTINCT * into EMPLOYEE_DEPT from EMP_DEPT


SELECT * FROM EMPLOYEE_DEPT

--CARTESIAN PRODUCT
SELECT * FROM EMPLOYEE_DEPT CROSS JOIN DEPARTMENTS


--INNER JOIN
SELECT * FROM EMPLOYEE_DEPT AS EMP_DEPT 
INNER JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID


--OUTER JOIN
SELECT * FROM EMPLOYEE_DEPT AS EMP_DEPT 
FULL OUTER JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 

--RIGHT JOIN
SELECT * FROM EMPLOYEE_DEPT AS EMP_DEPT 
RIGHT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 

--LEFT JOIN
SELECT * FROM EMPLOYEE_DEPT AS EMP_DEPT 
LEFT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 


--UNION
SELECT * FROM EMPLOYEE_DEPT AS EMP_DEPT 
RIGHT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID
UNION
SELECT * FROM EMPLOYEE_DEPT AS EMP_DEPT 
LEFT JOIN DEPARTMENTS AS DEPT ON
EMP_DEPT.DEPT_ID = DEPT.DEPT_ID 


--ACTIVITY 3
SELECT EMP.NAME,EMP.SALARY, DEPT.NAME FROM EMPLOYEES AS EMP
INNER JOIN EMPLOYEE_DEPT AS EMP_DEPT ON
EMP.ID = EMP_DEPT.EMP_ID
INNER JOIN DEPARTMENTS AS DEPT ON
DEPT.DEPT_ID = EMP_DEPT.EMP_ID

SELECT * FROM EMPLOYEES
SELECT * FROM EMPLOYEE_DEPT

--WORKING WITH STRINGS
CREATE DATABASE PATIENT_CARE;
EXEC sp_databases

CREATE TABLE PATIENTS_INFO(
   Patient_ID   INT  NOT NULL,
   Name VARCHAR (20) NOT NULL,
   Department  CHAR (25) ,
   Diagnosis  CHAR (25) ,
   Date_admitted  DATETIME, 
   Date_discharged DATETIME,
   PRIMARY KEY (Patient_ID)
);

INSERT INTO PATIENTS_INFO VALUES(1 , 'John Oliver' , 'E&&R' , 'hand injury' , '2022-05-13 16:03:43' , '2022-05-13 18:01:45')
INSERT INTO PATIENTS_INFO VALUES(2 , 'Meghan Austin' , 'E&R' , 'Flu' , '2022-04-12 12:03:23' , '2022-04-12 13:04:35')
INSERT INTO PATIENTS_INFO VALUES(3 , ' Nick Hilson  ' , ' Cardiology' , 'Heart issues' , '2022-04-01 10:01:43' , '2022-04-26 19:03:35')
INSERT INTO PATIENTS_INFO VALUES(4 , ' anna Daniel' , 'e&r' , 'flu' , '2022-05-12 11:03:43' , '2022-05-15 20:01:45')
INSERT INTO PATIENTS_INFO VALUES(5 , 'Emma James' , 'E&R' , 'Accident' , '2022-03-29 15:02:52' , '2022-04-10 19:03:12')

SELECT * FROM PATIENTS_INFO

-- REMOVING UNWANTED CHARACTERS
SELECT  Name as real_Name, 
        trim(Name) as trimmed_Name
FROM patients_info

--UPDATE
UPDATE PATIENTS_INFO
SET Name = TRIM(NAME)


--UPPER AND TRIM
SELECT Upper(trim(diagnosis)) as Diagnosis_Type,
count(*) as Count_of_Diagnosis
FROM  patients_info
GROUP BY Upper(trim(diagnosis)) 

--REPLACE A CHARACTER
SELECT REPLACE(Department, '&&', '&') AS Department
FROM Patients_info

SELECT * FROM PATIENTS_INFO

--UPDATE 
UPDATE PATIENTS_INFO
SET DEPARTMENT = REPLACE(Department, '&&', '&')

--ACTIVITY 4
UPDATE PATIENTS_INFO
SET DEPARTMENT = REPLACE(Department, 'e&r', 'E&R')

UPDATE PATIENTS_INFO
SET DEPARTMENT = TRIM(DEPARTMENT)

--UPPER
SELECT Upper(trim(NAME)) as PATIENT_NAME,
DIAGNOSIS as PRIORITY_PATIENT
FROM  patients_info
WHERE DEPARTMENT = 'Cardiology'

--UPDATE 
UPDATE PATIENTS_INFO
SET NAME = UPPER(NAME) 
WHERE DEPARTMENT = 'Cardiology'

--SUBSTRING FROM A STRING
SELECT SUBSTRING (DEPARTMENT, 1 , 4 ) as DEPARTMENT_CODE
FROM PATIENTS_INFO

--LEFT FUNCTION
SELECT NAME,
       LEFT(DEPARTMENT, 5) AS DEPARTMENT 
  FROM PATIENTS_INFO

--LOWER
SELECT LOWER(DIAGNOSIS) as lower_diagnosis
  FROM PATIENTS_INFO

--UPPER
SELECT UPPER(NAME)
  FROM PATIENTS_INFO

--LENGTH



--SPLIT STRING
SELECT VALUE NAME FROM PATIENTS_INFO
     CROSS APPLY STRING_SPLIT(TRIM(NAME), ' ') AS FIRST_NAME
FROM PATIENTS_INFO

--SELECT Upper(left(trim(Name),1))+UPPER(right (trim(Name),Len(trim(Name))-1)) from PATIENTS_INFO



--WORKING WITH DATES

--GET CURRENT DATE
SELECT GETDATE() as Current__Date

--NUMBER OF DAYS BETWEEN TWO DATES
SELECT *, 
DATEDIFF (day,DATE_ADMITTED, DATE_DISCHARGED ) AS DAYS_ADMITTED 
FROM PATIENTS_INFO  

--Hours
SELECT *, 
DATEDIFF (hour,DATE_ADMITTED, DATE_DISCHARGED ) AS DAYS_ADMITTED 
FROM PATIENTS_INFO  WHERE DEPARTMENT = 'E&R'

SELECT AVG(DATEDIFF (day,DATE_ADMITTED, DATE_DISCHARGED )) AS DAYS_ADMITTED 
FROM PATIENTS_INFO 
WHERE DEPARTMENT = 'E&R' 
